generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @map("user_id") @db.Uuid
  username  String    @unique @db.VarChar(255)
  password  String    @db.VarChar(60)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")

  userRole UserRole[]
  teamUser TeamUser[]
  Website  Website[]

  @@map("user")
}

model Session {
  id        String    @id @unique @map("session_id") @db.Uuid
  websiteId String    @map("website_id") @db.Uuid
  hostname  String?   @db.VarChar(100)
  browser   String?   @db.VarChar(20)
  os        String?   @db.VarChar(20)
  device    String?   @db.VarChar(20)
  screen    String?   @db.VarChar(11)
  language  String?   @db.VarChar(35)
  country   String?   @db.Char(2)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([createdAt])
  @@index([websiteId])
  @@map("session")
}

model Website {
  id        String    @id @unique @map("website_id") @db.Uuid
  name      String    @db.VarChar(100)
  domain    String?   @db.VarChar(500)
  shareId   String?   @unique @map("share_id") @db.VarChar(64)
  revId     Int       @default(0) @map("rev_id") @db.Integer
  userId    String?   @map("user_id") @db.Uuid
  teamId    String?   @map("team_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")

  team Team? @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([shareId])
  @@map("website")
}

model WebsiteEvent {
  id        String    @id() @map("event_id") @db.Uuid
  websiteId String    @map("website_id") @db.Uuid
  sessionId String    @map("session_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  url       String    @db.VarChar(500)
  referrer  String?   @db.VarChar(500)
  eventType Int       @default(1) @map("event_type") @db.Integer
  eventName String?   @map("event_name") @db.VarChar(50)
  eventData Json?     @map("event_data")

  @@index([createdAt])
  @@index([sessionId])
  @@index([websiteId])
  @@index([websiteId, createdAt])
  @@index([websiteId, sessionId, createdAt])
  @@map("website_event")
}

model UserRole {
  id        String    @id() @unique() @map("user_role_id") @db.Uuid
  role      String    @map("role") @db.VarChar(100)
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")

  user User @relation(fields: [userId], references: [id])

  @@unique([role, userId])
  @@map("user_role")
}

model Team {
  id        String    @id() @unique() @map("team_id") @db.Uuid
  name      String    @unique() @db.VarChar(50)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")

  teamUsers TeamUser[]
  Website   Website[]

  @@map("team")
}

model TeamUser {
  id        String    @id() @unique() @map("team_user_id") @db.Uuid
  teamId    String    @map("team_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  role      String    @map("role") @db.VarChar(100)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("team_user")
}
